# -*- coding: utf-8 -*-
"""Kopie van assignment attacksipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e4wWEpS94iAFYGl0tVDdENX9_F-Bxdzm

In deze assignment is het de bedoeling om de volgende vier vragen te beantwoorden
1.what are the most dangerous types of sharks to humans?
2.are children more likely to be attacked by sharks?
3.are shark attacks where sharks were provoked more or less dangerous?
4.are certain activities more likely to result in a shark attack?
"""

# Commented out IPython magic to ensure Python compatibility.
from os import read
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px 

# %load_ext google.colab.data_table
shark_df = pd.read_csv("/content/attacks.csv",encoding ='cp1252')
shark_df.head()

shark_df.columns = shark_df.columns.str.strip()
shark_df.columns

shark_df.drop(['Case Number', 'Date', 'Year', 'Country', 'Area', 'Location','Time','Investigator or Source', 'pdf', 'href formula', 'href',
       'Case Number.1', 'Case Number.2', 'original order', 'Unnamed: 22','Unnamed: 23'],axis=1, inplace = True)

shark_df.dropna ()
shark_df.head()
#shark_df.columns

shark_df.Species.value_counts
shark_df['Species'] = shark_df['Species'].fillna('Unknown shark')
shark_df['New Species'] = None

import re
shark_pattern = r'.* (shark|Shark)'

for row in range(len(shark_df)):
    try:
        shark_species = re.search(shark_pattern, shark_df.iat[row, shark_df.columns.get_loc('Species')]).group()
        shark_df.iat[row, shark_df.columns.get_loc('New Species')] = shark_species
    except:
       
         shark_df.iat[row, shark_df.columns.get_loc('New Species')] = "Shark involvement not confirmed"

bySpecies_count = shark_df['New Species'].value_counts().reset_index().rename(columns={'New Species':'Count','index':'Species'})
bySpecies_count.head()

"""In de figuur neem je niet alle rijen rij 0 en rij 1 zijn geen sharks dus die worden niet meegenomen."""

fig = px.pie(data_frame = bySpecies_count.iloc[2:12,:],
             values = 'Count',
             names = 'Species',
             title = 'Top 10 Shark Species',
             color_discrete_sequence=px.colors.qualitative.Prism
             )

fig.update_traces(textposition ='outside',
                  textinfo = 'percent', pull = [0.1]*10)
fig.update_layout(paper_bgcolor='cornsilk',
                  legend_title = 'Shark Type',
                  font = dict(
                      family = "Courier New, monospace",
                      size = 18,color = 'black'
                  ))

fig.show()

shark_df.Activity.unique()

prov_act = shark_df[shark_df.Type == 'Provoked'].groupby('Activity')['Activity'].count().sort_values(ascending=False)[:10]

fig = px.bar(prov_act, x=prov_act.values, y=prov_act.index, orientation='h', labels={'index':'','x':'Attack Count'},
            title = 'Provoked Attacks by Activity')
fig.update_layout(height=500, width=800)
fig.show()

Activity_df = shark_df

shark_df.Age.dropna()

shark_df['Age'] = pd.to_numeric(shark_df['Age'], errors='coerce', downcast="integer")
#And for remove all rows with NaNs in column x use dropna:

shark_1 = shark_df.dropna(subset=['Age'])
#Last convert values to ints:

#shark_df.loc['Age'] = shark_df['Age'].astype(int)

sharkage = shark_df.groupby(['Age', 'Fatal (Y/N)'],as_index=False).size()
sharkage = sharkage.sort_values(by=['size'], ascending=False)
sharkage = sharkage[0:25]


sharkage.head()

kids = pd.cut (shark_df.Age, bins = (0.0,12.0,25.0,99.0), labels = ['Child','Young adult','Adult'])
kids

shark_df['NewAge'] = kids
shark_df.dropna(subset=['NewAge'])
shark_df.columns
shark_df.head(20)

shark_1= shark_df['NewAge'].dropna()
byNewAge_count = shark_df['NewAge'].value_counts().reset_index().rename(columns={'NewAge':'Count','index':'Age'})
fig = px.pie(data_frame = byNewAge_count.iloc[0:12,:],
             values = 'Count',
             names = 'Age',
             title = 'childrenversus adults',
             color_discrete_sequence=px.colors.qualitative.Prism
             )
fig.show()

sha_att= shark_df.groupby(['Type'])
sha_att.get_group('Unprovoked')

sha_att= shark_df.groupby(['Type'])
sha_att.get_group('Provoked')
sha_att.get_group('Unprovoked')

"""uit deze code blijkt dat veel meer Unprovoked leiden (1155) tot fatal injuries dan provoked (15)"""

sha_att['Injury'].apply(lambda x: x.str.contains('FATAL').sum())

"""Deze code geeft weer welke activiteiten (swimming en surfing)tot de grootste attacks leiden. Het nadeel is wel dat er nog teveel NAN in voorkomt . De kolom zou nog schoongemaakt moeten worden om deze te verwijderen via dropna."""

NewActivity = shark_df.Activity.dropna()
shark_df['New Activity'] = NewActivity
shark_df.columns

from wordcloud import WordCloud
words=shark_df['New Activity'].tolist()
words=''.join(str(words))
plt.figure(figsize=(12,12))
plt.imshow(WordCloud().generate(words))